require('dotenv').config();
const { Telegraf } = require('telegraf');
const mongoose = require('mongoose');

mongoose.connect(process.env.MONGODB_URI, {});

const userSchema = new mongoose.Schema({
  userId: Number,
  chatId: Number,
  score: { type: Number, default: 0 },
  lastUsed: Date
});

const User = mongoose.model('User', userSchema);

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç -10 –¥–æ 10
function getRandomNumber() {
  return Math.floor(Math.random() * 21) - 10; // 0-20 => -10-10
}

bot.command('dick', async (ctx) => {
  if (ctx.chat.type === 'private') {
    return ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!');
  }

  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  try {
    const user = await User.findOneAndUpdate(
      { userId, chatId },
      { $setOnInsert: { userId, chatId, score: 0 } },
      { new: true, upsert: true }
    );

    const now = new Date();
    const lastUsed = user.lastUsed || new Date(0);
    const diffHours = Math.abs(now - lastUsed) / 36e5;

    if (diffHours < 24) {
      const nextUse = new Date(lastUsed.getTime() + 24 * 60 * 60 * 1000);
      return ctx.reply(`–°–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ: ${nextUse.toLocaleTimeString()}`);
    }

    const randomNumber = getRandomNumber();
    const newScore = user.score + randomNumber;
    
    await User.updateOne(
      { userId, chatId },
      { $set: { score: newScore, lastUsed: now } }
    );

    ctx.reply(
      `üé≤ ${ctx.from.first_name}, —Ç–≤–æ–π —á–ª–µ–Ω —É–≤–µ–ª–∏—á–∏—Å–ª—è –Ω–∞: ${randomNumber}\n` +
      `–ï–≥–æ –¥–ª–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å: ${newScore}`
    );
  } catch (err) {
    console.error(err);
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
  }
});

bot.command('score', async (ctx) => {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  try {
    const user = await User.findOne({ userId, chatId });
    const score = user ? user.score : 0;
    ctx.reply(`üìä ${ctx.from.first_name}, –¥–ª–∏–Ω–∞ —Ç–≤–æ–µ–≥–æ —á–ª–µ–Ω–∞: ${score}`);
  } catch (err) {
    console.error(err);
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–∞');
  }
});

// –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–æ–ø-–∏–≥—Ä–æ–∫–æ–≤
bot.command('top', async (ctx) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
      const topUsers = await User.find({ chatId: ctx.chat.id })
        .sort({ score: -1 })
        .limit(10)
        .lean() // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–π JS-–æ–±—ä–µ–∫—Ç
        .exec();
  
      if (topUsers.length === 0) {
        return ctx.reply("üòî –í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞!");
      }
  
      // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
      const topList = await Promise.all(
        topUsers.map(async (user, index) => {
          try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram API
            const member = await ctx.telegram.getChatMember(ctx.chat.id, user.userId);
            const name = member.user.first_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.userId}`;
            return `${index + 1}. ${name}: ${user.score} —Å–º`;
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.userId}:`, error);
            return `${index + 1}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]: ${user.score} –±–∞–ª–ª–æ–≤`;
          }
        })
      );
  
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const header = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\n\n";
      const message = header + topList.join("\n");
      
      await ctx.reply(message);
      
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /top:", error);
      ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

bot.launch().then(() => console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));